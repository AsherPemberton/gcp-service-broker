# Copyright the Service Broker Project Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is AUTOGENERATED by ./gcp-service-broker generate, DO NOT EDIT IT.

---
name: gcp-service-broker
icon_file: gcp_logo.png
label: Google Cloud Platform Service Broker
description: 'A service broker for Google Cloud Platform services.'
org: system

stemcell_criteria:
  os: 'ubuntu-xenial'
  version: '170.19'

apply_open_security_group: true

migration: |
  {
  // migration: 0, Delete whitelist keys from 4.x
  {
  
  // env2prop converts an environment variable to property name
  function env2prop(envVar) {return '.properties.' + envVar.toLowerCase();}
  
  // lookupProp lookus up an environment variable as a prop and returns the value.
  function lookupProp(envVar) {
  	var prop = env2prop(envVar);
  	return (prop in properties.properties) ? properties.properties[prop].value : null;
  }
  
  // deleteProp removes a property from the properties list.
  function deleteProp(envVar) { delete properties.properties[env2prop(envVar)];}
  
  // setProp sets a property on the properties list.
  function setProp(envVar, value) {
  	var prop = env2prop(envVar);
  
  	if (!(prop in properties.properties)) {
  		properties.properties[prop] = {'value': value, 'type': 'text'};
  	} else {
  		properties['properties'][prop].value = value;
  	}
  }
  
  
  
  deleteProp("GSB_SERVICE_GOOGLE_BIGQUERY_WHITELIST");
  deleteProp("GSB_SERVICE_GOOGLE_BIGTABLE_WHITELIST");
  deleteProp("GSB_SERVICE_GOOGLE_CLOUDSQL_MYSQL_WHITELIST");
  deleteProp("GSB_SERVICE_GOOGLE_CLOUDSQL_POSTGRES_WHITELIST");
  deleteProp("GSB_SERVICE_GOOGLE_ML_APIS_WHITELIST");
  deleteProp("GSB_SERVICE_GOOGLE_PUBSUB_WHITELIST");
  deleteProp("GSB_SERVICE_GOOGLE_SPANNER_WHITELIST");
  deleteProp("GSB_SERVICE_GOOGLE_STORAGE_WHITELIST");
  }
  
  }
  {
  // migration: 1, Collapse custom plans
  {
  
  // env2prop converts an environment variable to property name
  function env2prop(envVar) {return '.properties.' + envVar.toLowerCase();}
  
  // lookupProp lookus up an environment variable as a prop and returns the value.
  function lookupProp(envVar) {
  	var prop = env2prop(envVar);
  	return (prop in properties.properties) ? properties.properties[prop].value : null;
  }
  
  // deleteProp removes a property from the properties list.
  function deleteProp(envVar) { delete properties.properties[env2prop(envVar)];}
  
  // setProp sets a property on the properties list.
  function setProp(envVar, value) {
  	var prop = env2prop(envVar);
  
  	if (!(prop in properties.properties)) {
  		properties.properties[prop] = {'value': value, 'type': 'text'};
  	} else {
  		properties['properties'][prop].value = value;
  	}
  }
  
  
      function replaceCustomPlans(envVar) {
        var planList = lookupProp(envVar);
  
        // do nothing if the planList doesn't exist or if it's already a string
        if (planList == null || typeof (planList) === 'string') {
          return;
        }
  
        var out = [];
        for (var i in planList) {
          var plan = planList[i];
          var converted = {};
          for (var k in plan) {
            converted[k] = plan[k].value;
          }
  
          out.push(converted);
        }
  
        setProp(envVar, JSON.stringify(out, null, "  "));
      }
  
  
  
  replaceCustomPlans("BIGQUERY_CUSTOM_PLANS");
  replaceCustomPlans("BIGTABLE_CUSTOM_PLANS");
  replaceCustomPlans("CLOUDSQL_MYSQL_CUSTOM_PLANS");
  replaceCustomPlans("CLOUDSQL_POSTGRES_CUSTOM_PLANS");
  replaceCustomPlans("DATAFLOW_CUSTOM_PLANS");
  replaceCustomPlans("DATASTORE_CUSTOM_PLANS");
  replaceCustomPlans("DIALOGFLOW_CUSTOM_PLANS");
  replaceCustomPlans("FIRESTORE_CUSTOM_PLANS");
  replaceCustomPlans("ML_APIS_CUSTOM_PLANS");
  replaceCustomPlans("PUBSUB_CUSTOM_PLANS");
  replaceCustomPlans("SPANNER_CUSTOM_PLANS");
  replaceCustomPlans("STACKDRIVER_DEBUGGER_CUSTOM_PLANS");
  replaceCustomPlans("STACKDRIVER_MONITORING_CUSTOM_PLANS");
  replaceCustomPlans("STACKDRIVER_PROFILER_CUSTOM_PLANS");
  replaceCustomPlans("STACKDRIVER_TRACE_CUSTOM_PLANS");
  replaceCustomPlans("STORAGE_CUSTOM_PLANS");
  }
  
  }
  {
  // migration: 2, Format custom plans
  {
  
  // env2prop converts an environment variable to property name
  function env2prop(envVar) {return '.properties.' + envVar.toLowerCase();}
  
  // lookupProp lookus up an environment variable as a prop and returns the value.
  function lookupProp(envVar) {
  	var prop = env2prop(envVar);
  	return (prop in properties.properties) ? properties.properties[prop].value : null;
  }
  
  // deleteProp removes a property from the properties list.
  function deleteProp(envVar) { delete properties.properties[env2prop(envVar)];}
  
  // setProp sets a property on the properties list.
  function setProp(envVar, value) {
  	var prop = env2prop(envVar);
  
  	if (!(prop in properties.properties)) {
  		properties.properties[prop] = {'value': value, 'type': 'text'};
  	} else {
  		properties['properties'][prop].value = value;
  	}
  }
  
  
      function formatPlans(envVar) {
        var plansListJson = lookupProp(envVar);
        if (plansListJson == null) {
          return;
        }
  
        var planList = JSON.parse(plansListJson);
  
        var out = [];
        for (var i in planList) {
          var plan = planList[i];
          var converted = {};
          var properties = {};
          for (var k in plan) {
            var value = plan[k];
            if (k === 'service') { continue; }  // skip service key, it's no longer needed
  
            if (['guid', 'description', 'name', 'display_name'].indexOf(k) >= 0) {
              converted[k] = value;
            } else {
              properties[k] = value;
            }
          }
          converted.properties = properties;
          out.push(converted);
        }
  
        setProp(envVar, JSON.stringify(out));
      }
  
  
  formatPlans("BIGQUERY_CUSTOM_PLANS");
  formatPlans("BIGTABLE_CUSTOM_PLANS");
  formatPlans("CLOUDSQL_MYSQL_CUSTOM_PLANS");
  formatPlans("CLOUDSQL_POSTGRES_CUSTOM_PLANS");
  formatPlans("DATAFLOW_CUSTOM_PLANS");
  formatPlans("DATASTORE_CUSTOM_PLANS");
  formatPlans("DIALOGFLOW_CUSTOM_PLANS");
  formatPlans("FIRESTORE_CUSTOM_PLANS");
  formatPlans("ML_APIS_CUSTOM_PLANS");
  formatPlans("PUBSUB_CUSTOM_PLANS");
  formatPlans("SPANNER_CUSTOM_PLANS");
  formatPlans("STACKDRIVER_DEBUGGER_CUSTOM_PLANS");
  formatPlans("STACKDRIVER_MONITORING_CUSTOM_PLANS");
  formatPlans("STACKDRIVER_PROFILER_CUSTOM_PLANS");
  formatPlans("STACKDRIVER_TRACE_CUSTOM_PLANS");
  formatPlans("STORAGE_CUSTOM_PLANS");
  }
  
  }
  {
  // migration: 3, Merge Service Config
  {
  
  // env2prop converts an environment variable to property name
  function env2prop(envVar) {return '.properties.' + envVar.toLowerCase();}
  
  // lookupProp lookus up an environment variable as a prop and returns the value.
  function lookupProp(envVar) {
  	var prop = env2prop(envVar);
  	return (prop in properties.properties) ? properties.properties[prop].value : null;
  }
  
  // deleteProp removes a property from the properties list.
  function deleteProp(envVar) { delete properties.properties[env2prop(envVar)];}
  
  // setProp sets a property on the properties list.
  function setProp(envVar, value) {
  	var prop = env2prop(envVar);
  
  	if (!(prop in properties.properties)) {
  		properties.properties[prop] = {'value': value, 'type': 'text'};
  	} else {
  		properties['properties'][prop].value = value;
  	}
  }
  
  
  
  		function anyExist(envVars) {
  			for(var i in envVars) {
  				if(lookupProp(envVars[i]) !== null) {
  					return true;
  				}
  			}
  
  			return false;
  		}
  
      function mergeService(svcName) {
        var customPlanVar = svcName+"_CUSTOM_PLANS";
        var enabledVar = "GSB_SERVICE_GOOGLE_"+svcName+"_ENABLED";
        var bindDefaultsVar = "GSB_SERVICE_GOOGLE_"+svcName+"_BIND_DEFAULTS";
        var provisionDefaultsVar = "GSB_SERVICE_GOOGLE_"+svcName+"_PROVISION_DEFAULTS";
  
  			if (! anyExist([customPlanVar, enabledVar, bindDefaultsVar, provisionDefaultsVar])) {
  				return null;
  			}
  
  			// explicitly check for boolean enabled false and turn it into a string.
  			var enabled = lookupProp(enabledVar);
  			if (enabled === false) {
  				enabled = 'false';
  			}
  
        var context = {
          "custom_plans": lookupProp(customPlanVar) || '[]',
          "enabled": enabled || 'true',
          "bind_defaults": lookupProp(bindDefaultsVar) || '{}',
          "provision_defaults": lookupProp(provisionDefaultsVar) || '{}',
        }
  
        deleteProp(customPlanVar);
        deleteProp(enabledVar);
        deleteProp(bindDefaultsVar);
        deleteProp(provisionDefaultsVar);
  
        // convert to plain object
        for (var key in context) {
          context[key] = JSON.parse(context[key]);
        }
  
  			context["disabled"] = !context["enabled"];
  			delete context["enabled"];
  
        context["//"] = "Builtin " + svcName;
        return context;
      }
  
      function mergeServices(envVar) {
        var out = {
          "f80c0a3e-bd4d-4809-a900-b4e33a6450f1": mergeService("BIGQUERY"),
          "b8e19880-ac58-42ef-b033-f7cd9c94d1fe": mergeService("BIGTABLE"),
          "4bc59b9a-8520-409f-85da-1c7552315863": mergeService("CLOUDSQL_MYSQL"),
          "cbad6d78-a73c-432d-b8ff-b219a17a803a": mergeService("CLOUDSQL_POSTGRES"),
          "3e897eb3-9062-4966-bd4f-85bda0f73b3d": mergeService("DATAFLOW"),
          "76d4abb2-fee7-4c8f-aee1-bcea2837f02b": mergeService("DATASTORE"),
          "e84b69db-3de9-4688-8f5c-26b9d5b1f129": mergeService("DIALOGFLOW"),
          "a2b7b873-1e34-4530-8a42-902ff7d66b43": mergeService("FIRESTORE"),
          "5ad2dce0-51f7-4ede-8b46-293d6df1e8d4": mergeService("ML_APIS"),
          "628629e3-79f5-4255-b981-d14c6c7856be": mergeService("PUBSUB"),
          "51b3e27e-d323-49ce-8c5f-1211e6409e82": mergeService("SPANNER"),
          "83837945-1547-41e0-b661-ea31d76eed11": mergeService("STACKDRIVER_DEBUGGER"),
          "2bc0d9ed-3f68-4056-b842-4a85cfbc727f": mergeService("STACKDRIVER_MONITORING"),
          "00b9ca4a-7cd6-406a-a5b7-2f43f41ade75": mergeService("STACKDRIVER_PROFILER"),
          "c5ddfe15-24d9-47f8-8ffe-f6b7daa9cf4a": mergeService("STACKDRIVER_TRACE"),
          "b9e4332e-b42b-4680-bda5-ea1506797474": mergeService("STORAGE")
        };
  
  			Object.keys(out).forEach(function(key) {
  			if (out[key] == null) delete out[key];
  		});
  
  
  			for (var key in out) {
  				if(out[key] == null) {
  					delete out[key];
  				}
  			}
  
        setProp(envVar, JSON.stringify(out, null, "  "));
      }
  
  mergeServices("GSB_SERVICE_CONFIG");
  }
  
  }
  

packages:
- name: gcp-service-broker
  type: app-broker
  manifest:
    buildpack: go_buildpack
    path: /tmp/gcp-service-broker.zip
    env:
      GOPACKAGENAME: github.com/GoogleCloudPlatform/gcp-service-broker
      GOVERSION: go1.10
      # You can override plans here.
  needs_cf_credentials: true
  enable_global_access_to_plans: true


# Uncomment this section if you want to display forms with configurable
# properties in Ops Manager. These properties will be passed to your
# applications as environment variables. You can also refer to them
# elsewhere in this template by using:
#     (( .properties.<property-name> ))
forms:
- name: root_service_account
  label: Root Service Account
  description: Please paste in the contents of the json keyfile (un-encoded) for your
    service account with owner credentials.
  properties:
  - name: root_service_account_json
    type: text
    label: Root Service Account JSON
    configurable: true
- name: database_properties
  label: Database Properties
  description: Connection details for the service broker's database. It must be MySQL
    compatible.
  properties:
  - name: db_host
    type: string
    label: Database host
    configurable: true
  - name: db_username
    type: string
    label: Database username
    configurable: true
    optional: true
  - name: db_password
    type: secret
    label: Database password
    configurable: true
    optional: true
  - name: db_port
    type: string
    default: "3306"
    label: Database port
    configurable: true
  - name: db_name
    type: string
    default: servicebroker
    label: Database name
    configurable: true
  - name: ca_cert
    type: text
    label: Server CA cert
    configurable: true
    optional: true
  - name: client_cert
    type: text
    label: Client cert
    configurable: true
    optional: true
  - name: client_key
    type: text
    label: Client key
    configurable: true
    optional: true
- name: brokerpaks
  label: Service Configuration
  description: Configuration for built-in and Brokerpak services.
  properties:
  - name: gsb_brokerpak_config
    type: text
    default: '{}'
    label: Global Brokerpak Configuration
    description: A JSON map of configuration key/value pairs for all brokerpaks. If
      a variable isn't found in the specific brokerpak's configuration it's looked
      up here.
    configurable: true
  - name: gsb_service_config
    type: text
    default: '{}'
    label: Service Configuration Options
    description: See the configuration.md file or /configuration endpoint on the service
      for how to configure services using this field.
    configurable: true
- name: features
  label: Feature Flags
  description: Service broker feature flags.
  properties:
  - name: gsb_compatibility_enable_builtin_services
    type: boolean
    default: "true"
    label: enable-builtin-services
    description: Enable services that are built in to the broker i.e. not brokerpaks.
    configurable: true
  - name: gsb_compatibility_enable_catalog_schemas
    type: boolean
    default: "false"
    label: enable-catalog-schemas
    description: Enable generating JSONSchema for the service catalog.
    configurable: true
  - name: gsb_compatibility_enable_cf_sharing
    type: boolean
    default: "false"
    label: enable-cf-sharing
    description: Set all services to have the Sharable flag so they can be shared
      across spaces in PCF.
    configurable: true
  - name: gsb_compatibility_enable_eol_services
    type: boolean
    default: "false"
    label: enable-eol-services
    description: Enable broker services that are end of life.
    configurable: true
  - name: gsb_compatibility_enable_gcp_beta_services
    type: boolean
    default: "true"
    label: enable-gcp-beta-services
    description: Enable services that are in GCP Beta. These have no SLA or support
      policy.
    configurable: true
  - name: gsb_compatibility_enable_gcp_deprecated_services
    type: boolean
    default: "false"
    label: enable-gcp-deprecated-services
    description: Enable services that use deprecated GCP components.
    configurable: true
  - name: gsb_compatibility_enable_preview_services
    type: boolean
    default: "true"
    label: enable-preview-services
    description: Enable services that are new to the broker this release.
    configurable: true
  - name: gsb_compatibility_enable_terraform_services
    type: boolean
    default: "false"
    label: enable-terraform-services
    description: Enable services that use the experimental, unstable, Terraform back-end.
    configurable: true
  - name: gsb_compatibility_enable_unmaintained_services
    type: boolean
    default: "false"
    label: enable-unmaintained-services
    description: Enable broker services that are unmaintained.
    configurable: true
service_plan_forms:
- name: gsb_brokerpak_sources
  label: Install Brokerpaks
  description: ' Brokerpaks are ways to extend the broker with custom services defined
    by Terraform templates. A brokerpak is an archive comprised of a versioned Terraform
    binary and providers for one or more platform, a manifest, one or more service
    definitions, and source code.'
  optional: true
  properties:
  - name: uri
    type: string
    label: Brokerpak URI
    description: ' The URI to load. Supported protocols are http, https, gs, and git.
      Cloud Storage (gs) URIs follow the gs://<bucket>/<path> convention and will
      be read using the service broker service account. You can validate the checksum
      of any file on download by appending a checksum query parameter to the URI in
      the format type:value. Valid checksum types are MD5, SHA1, SHA256 and SHA512.
      e.g. gs://foo/bar.brokerpak?checksum=md5:3063a2c62e82ef8614eee6745a7b6b59'
    configurable: true
  - name: service_prefix
    type: string
    label: Service Prefix
    description: A prefix to prepend to every service name. This will be exact, so
      you may want to include a trailing dash.
    configurable: true
    optional: true
  - name: excluded_services
    type: text
    label: Excluded Services
    description: A list of UUIDs of services to exclude, one per line.
    configurable: true
    optional: true
  - name: config
    type: text
    default: '{}'
    label: Brokerpak Configuration
    description: A JSON map of configuration key/value pairs for the brokerpak. If
      a variable isn't found here, it's looked up in the global config.
    configurable: true
  - name: notes
    type: text
    label: Notes
    description: A place for your notes, not used by the broker.
    configurable: true
    optional: true
